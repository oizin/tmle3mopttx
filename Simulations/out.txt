
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Simulation 1a: 
> #Rule dependent on single covariate
> #~50% A=1 and ~50% A=0 allocation is the optimal rule
> #When W4>0, optimal A=1
> #When W4<0, optimal A=0
> 
> library(tmle3mopttx)
> library(sl3)
> library(tmle3)
> 
> 
> Qbar0 <- function(A, W) {
+   W1 <- W[, 1]
+   W2 <- W[, 2]
+   W3 <- W[, 3]
+   W4 <- W[, 4]
+   #When W4>0, optimal A=1
+   #When W4<0, optimal A=0
+   Qbar <- ifelse(W4 > 0, plogis(7 * A), plogis(-5*A))
+   return(Qbar)
+ }
> 
> g0 <- function(W) {
+   W1 <- W[, 1]
+   W2 <- W[, 2]
+   W3 <- W[, 3]
+   W4 <- W[, 4]
+   
+   plogis(0.25 * W1 - 0.1 * W2)
+ }
> 
> gen_data <- function(n = 1000, p = 4) {
+   W <- matrix(rnorm(n * p), nrow = n)
+   colnames(W) <- paste("W", seq_len(p), sep = "")
+   A <- rbinom(n, 1, g0(W))
+   u <- runif(n)
+   Y <- as.numeric(u < Qbar0(A, W))
+   Y0 <- as.numeric(u < Qbar0(0, W))
+   Y1 <- as.numeric(u < Qbar0(1, W))
+   d0 <- as.numeric(Qbar0(1, W) > Qbar0(0, W))
+   Yd0 <- as.numeric(u < Qbar0(d0, W))
+   data.frame(W, A, Y, Y0, Y1, Yd0, d0, blip = Qbar0(1, W) - Qbar0(0, W))
+ }
> 
> set.seed(11)
> data_full <- gen_data(1000000, 4)
> data_tda <- gen_data(500000, 4)
> data_tda <- data_tda[,1:6]
> psi<-mean(data_full$Yd0)
> mean(data_full$Y1)
[1] 0.503155
> mean(data_full$Y0)
[1] 0.499872
> table(data_full$d0)

     0      1 
499835 500165 
> 
> # Define sl3 library and metalearners:
> 
> xgboost_50<-Lrnr_xgboost$new(nrounds = 50)
> xgboost_100<-Lrnr_xgboost$new(nrounds = 100)
> xgboost_500<-Lrnr_xgboost$new(nrounds = 500)
> xgboost_1000<-Lrnr_xgboost$new(nrounds = 1000)
> glmnet_0.2<-Lrnr_glmnet$new(alpha = 0.2, lambda = 300)
> glmnet_0.4<-Lrnr_glmnet$new(alpha = 0.4, lambda = 300)
> glmnet_0.6<-Lrnr_glmnet$new(alpha = 0.6, lambda = 300)
> glmnet_0.8<-Lrnr_glmnet$new(alpha = 0.8, lambda = 300)
> 
> lrn1 <- Lrnr_mean$new()
> lrn2<-Lrnr_glm_fast$new()
> lrn3<-Lrnr_hal9001$new()
> 
> Q_learner <- Lrnr_sl$new(
+   #learners = list(xgboost_100,xgboost_500,xgboost_1000,lrn2),
+   learners = list(xgboost_50,xgboost_100,xgboost_500,
+                   lrn1,lrn2,xgboost_1000),
+   metalearner = Lrnr_nnls$new()
+ )
> 
> g_learner <- Lrnr_sl$new(
+   learners = list(lrn2),
+   #learners = list(xgboost_100,xgboost_500,glmnet_0.2,glmnet_0.8,lrn1,lrn2),
+   metalearner = Lrnr_nnls$new()
+ )
> 
> b_learner <- Lrnr_sl$new(
+   #learners = list(xgboost_100,xgboost_500,xgboost_1000,lrn2),
+   learners = list(xgboost_100,lrn2,xgboost_1000),
+   metalearner = Lrnr_nnls$new()
+ )
> 
> learner_list <- list(Y = Q_learner, A = g_learner, B = b_learner)
> 
> ##########################
> n=1000
> 
> 
> sim <- function(i){
+   message(i)  
+   
+   #Generate data:
+   data <- gen_data(n, 4)
+   W<-data_tda[,1:4]
+   
+   # Define spec:
+   tmle_spec <- tmle3_mopttx_blip_revere(
+     V = c("W4"), type = "blip1",
+     b_learner = learner_list$B, maximize = TRUE, complex = TRUE
+   )
+   
+   # Define nodes:
+   node_list <- list(W = c("W1", "W2", "W3", "W4"), A = "A", Y = "Y")
+ 
+   fit <- tmle3(tmle_spec, data=data, node_list=node_list, learner_list=learner_list)
+   fit
+   
+   #est[i,1:10]<-tmle_spec$make_est_fin(fit, tmle_spec$options$max, p.value = 0.1)
+   est<-as.list(fit$summary)
+   est$coverage <- as.numeric(est$lower_transformed<=psi & est$upper_transformed >= psi)
+   
+   #True data-adaptive parameter:
+   tda_task <- tmle_spec$make_tmle_task(data_tda, node_list)
+   opt<-tmle_spec$return_rule()
+   
+   
+   tda_tx <- opt$rule(tda_task, "full")
+   tda_W <- tda_task$get_tmle_node("W")
+   Edn <- mean(Qbar0(tda_tx,tda_W))
+   est$Edn <- Edn
+   est$coverage_dn <- as.numeric(est$lower_transformed<=Edn & est$upper_transformed >= Edn)
+   names(est)<-c("type","param","init_est","tmle_est","se","lower","upper",
+                 "psi_transformed","lower_transformed","upper_transformed","coverage", "true data-adpative", "coverage data-adaptive")
+   
+   results <- est
+   save(results, file=sprintf("sim1a_results/results%04d.rdata",i))
+   return(est)
+ }
> 
> # one_est <- sim(1)
> # print(one_est)
> MC=500
> n=1000
> 
> sl3_debug_mode()
> library(future)
> library(future.apply)
> library(data.table)
> i<-1
> plan(multiprocess, workers=16)
> sim_results <- future_lapply(seq_len(MC),sim)
